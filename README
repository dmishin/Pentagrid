Hyperbolic Cellular Automation Simulator

Description:
  This program is a simulator for totalistic 2-state cellular automations on hyperbolic plane (Lobachevsky plane).
  Simply speaking, it's a Life game in the hyperbolic space.
  
  In the current version, it only supports tiling of plane with equal pentagons, 4 pentagons touching in each vertex.

 
 Usage:
    To open the GUI, you should execute class org.ratson.pentagrid.gui.MainFrame.
    Use mouse to toggle cell states.
    
    For now, there is no GUI controls, only hotkeys:   
    Simulation:
	   SPACE - simulate one step
	   ENTER - start/stop continuous simulation
	   d - clear field
	   x - set new rule (see Rules)
	   r - create random field of some small radius
	      		
    Navigation:
	   c - jump to the center (useful if you have got lost far away)
	   arrow keys - navigate through hyperbolic space
	   [, ] - rotate view
    
    View:
	   g - toggle grid visibility
	   a - toggle anti-aliasing
	   
	   z - search for the cell clusters
	   o,p - go to the next/previous cell cluster (from the found previously) 

	Files:
	   s - save field data
	   l - load field data
	   e - export current view as PNG image
	   t - edit settings (for now, only "Export image size" option is working)
	   
Rules:
    Automation is 2-state (1 and 0), and totalistic. The latter means that the next state of the cell depends only on sum of states of its neighbores.
	This program uses 10-cell neighborhood (analogous to the Moore neighborhood in regular CA).
	Rules are specified as strings, like "B3/S23" which means:
	    Cell "born" (i.e. changes state from 0 to 1), if it has 3 alive neighbors.
	    Cell "survive" (i.e. holds state 1), if it has 2 or 3 alive neighbors.
	    In the all other cases, cell "dies" (its state becomes 0).
	
	To denote 10 neighbors, use letter "a". Rule strings are case-insensitive, "/" is optional. 

	Generally, rules, containing B0, can not be simulated by this program, since they produce infinite amounts of alive cells.
	Exception is Day/Night class rules, which have B0, but not have S10. In such rules, empty space changes to filled space,
	and filled space changes to empty space back. This allows to represent such rules as combination of 2 normal rules.
	Interestingly, there are rules in this class, that support gliders and not explosive. 

Technical characteristics:

    Field size is limited only by computer memory. However, note that in hyperbolic space, number of cells grows exponentially with area size.
    In addition to this, algorithms are not very memory-effective. On default settings, you can catch memory exception when cell count reaches 150'000.
    By increasing Java heap space, you can increase this limit to 300-400k cells. However, simulation is very slow for such sizes.
	
	Viewer now supports infinite-sized field!
	
Compilation:
	Depends on Jackson JSON library, used for data serializaiton. Only core library is needed (object mapper is not used).